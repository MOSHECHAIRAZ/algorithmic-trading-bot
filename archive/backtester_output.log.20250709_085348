2025-07-09 08:50:15,542 INFO --- Starting Backtest ---
2025-07-09 08:50:15,587 INFO Loaded 8 features from config.
2025-07-09 08:50:15,587 INFO Generating features for backtest (mirroring trainer)...
2025-07-09 08:50:15,589 INFO Loaded 61 known broken indicators to skip.
2025-07-09 08:50:16,968 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 08:50:16,969 ERROR result = attr(**kwargs)
2025-07-09 08:50:16,969 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
2025-07-09 08:50:16,969 ERROR result = attr(**kwargs)
2025-07-09 08:50:16,987 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 08:50:16,988 ERROR result = attr(**kwargs)
2025-07-09 08:50:18,928 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 08:50:18,928 ERROR result = attr(**kwargs)
2025-07-09 08:50:19,539 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 08:50:19,540 ERROR result = attr(**kwargs)
2025-07-09 08:50:20,469 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[7.07271608e+09 6.80830266e+09 7.68989479e+09 ... 3.47741073e+10
2025-07-09 08:50:20,469 ERROR 2.52100606e+10 1.93982310e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 08:50:20,469 ERROR result = attr(**kwargs)
2025-07-09 08:50:20,473 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[6.38663765e+09 4.62558366e+09 1.03476955e+10 ... 2.86157006e+10
2025-07-09 08:50:20,473 ERROR 3.01739483e+10 3.19953359e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 08:50:20,473 ERROR result = attr(**kwargs)
2025-07-09 08:50:20,478 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,479 ERROR df[result.name] = result
2025-07-09 08:50:20,481 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,482 ERROR df[result.name] = result
2025-07-09 08:50:20,485 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,485 ERROR df[result.name] = result
2025-07-09 08:50:20,486 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,486 ERROR df[result.name] = result
2025-07-09 08:50:20,492 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,492 ERROR df[result.name] = result
2025-07-09 08:50:20,499 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,499 ERROR df[result.name] = result
2025-07-09 08:50:20,508 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,508 ERROR df[result.name] = result
2025-07-09 08:50:20,516 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,516 ERROR df[result.name] = result
2025-07-09 08:50:20,518 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,519 ERROR df[col] = result[col]
2025-07-09 08:50:20,519 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,519 ERROR df[col] = result[col]
2025-07-09 08:50:20,520 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:20,520 ERROR df[col] = result[col]
2025-07-09 08:50:21,572 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:21,572 ERROR df[col] = result[col]
2025-07-09 08:50:21,572 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:21,572 ERROR df[col] = result[col]
2025-07-09 08:50:21,573 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:21,573 ERROR df[col] = result[col]
2025-07-09 08:50:21,574 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:21,574 ERROR df[col] = result[col]
2025-07-09 08:50:21,578 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:21,579 ERROR df[result.name] = result
2025-07-09 08:50:23,894 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,894 ERROR df[result.name] = result
2025-07-09 08:50:23,898 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,899 ERROR df[col] = result[col]
2025-07-09 08:50:23,899 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,899 ERROR df[col] = result[col]
2025-07-09 08:50:23,900 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,900 ERROR df[col] = result[col]
2025-07-09 08:50:23,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,901 ERROR df[result.name] = result
2025-07-09 08:50:23,905 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,905 ERROR df[result.name] = result
2025-07-09 08:50:23,906 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,906 ERROR df[result.name] = result
2025-07-09 08:50:23,922 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:23,922 ERROR df[result.name] = result
2025-07-09 08:50:25,945 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,946 ERROR df[col] = result[col]
2025-07-09 08:50:25,949 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,949 ERROR df[col] = result[col]
2025-07-09 08:50:25,950 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,951 ERROR df[col] = result[col]
2025-07-09 08:50:25,952 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,952 ERROR df[col] = result[col]
2025-07-09 08:50:25,961 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,961 ERROR df[result.name] = result
2025-07-09 08:50:25,963 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,963 ERROR df[result.name] = result
2025-07-09 08:50:25,965 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,965 ERROR df[result.name] = result
2025-07-09 08:50:25,995 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:25,995 ERROR df[result.name] = result
2025-07-09 08:50:26,099 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,099 ERROR df[result.name] = result
2025-07-09 08:50:26,105 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,106 ERROR df[result.name] = result
2025-07-09 08:50:26,428 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,428 ERROR df[result.name] = result
2025-07-09 08:50:26,430 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,430 ERROR df[result.name] = result
2025-07-09 08:50:26,432 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,433 ERROR df[result.name] = result
2025-07-09 08:50:26,435 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,435 ERROR df[result.name] = result
2025-07-09 08:50:26,446 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,447 ERROR df[col] = result[col]
2025-07-09 08:50:26,448 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,448 ERROR df[col] = result[col]
2025-07-09 08:50:26,449 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,450 ERROR df[col] = result[col]
2025-07-09 08:50:26,471 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,471 ERROR df[col] = result[col]
2025-07-09 08:50:26,472 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,473 ERROR df[col] = result[col]
2025-07-09 08:50:26,475 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,476 ERROR df[col] = result[col]
2025-07-09 08:50:26,477 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,477 ERROR df[col] = result[col]
2025-07-09 08:50:26,504 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,504 ERROR df[col] = result[col]
2025-07-09 08:50:26,506 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,507 ERROR df[col] = result[col]
2025-07-09 08:50:26,509 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,510 ERROR df[col] = result[col]
2025-07-09 08:50:26,511 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,511 ERROR df[col] = result[col]
2025-07-09 08:50:26,512 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,512 ERROR df[col] = result[col]
2025-07-09 08:50:26,513 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:26,513 ERROR df[col] = result[col]
2025-07-09 08:50:27,000 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:27,000 ERROR df[result.name] = result
2025-07-09 08:50:27,004 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 08:50:27,004 ERROR result = attr(**kwargs)
2025-07-09 08:50:28,132 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,132 ERROR df[col] = result[col]
2025-07-09 08:50:28,132 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,132 ERROR df[col] = result[col]
2025-07-09 08:50:28,133 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,133 ERROR df[col] = result[col]
2025-07-09 08:50:28,135 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,135 ERROR df[result.name] = result
2025-07-09 08:50:28,144 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,144 ERROR df[col] = result[col]
2025-07-09 08:50:28,146 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,146 ERROR df[col] = result[col]
2025-07-09 08:50:28,154 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,155 ERROR df[col] = result[col]
2025-07-09 08:50:28,156 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,156 ERROR df[col] = result[col]
2025-07-09 08:50:28,691 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,692 ERROR df[col] = result[col]
2025-07-09 08:50:28,693 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,693 ERROR df[col] = result[col]
2025-07-09 08:50:28,694 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,694 ERROR df[col] = result[col]
2025-07-09 08:50:28,694 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,695 ERROR df[col] = result[col]
2025-07-09 08:50:28,712 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,712 ERROR df[result.name] = result
2025-07-09 08:50:28,720 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:28,721 ERROR df[result.name] = result
2025-07-09 08:50:40,806 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,807 ERROR df[col] = result[col]
2025-07-09 08:50:40,808 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,809 ERROR df[col] = result[col]
2025-07-09 08:50:40,812 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,812 ERROR df[result.name] = result
2025-07-09 08:50:40,819 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,820 ERROR df[col] = result[col]
2025-07-09 08:50:40,843 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,843 ERROR df[col] = result[col]
2025-07-09 08:50:40,845 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,846 ERROR df[col] = result[col]
2025-07-09 08:50:40,848 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,848 ERROR df[col] = result[col]
2025-07-09 08:50:40,871 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,871 ERROR df[col] = result[col]
2025-07-09 08:50:40,872 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,873 ERROR df[col] = result[col]
2025-07-09 08:50:40,874 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,874 ERROR df[col] = result[col]
2025-07-09 08:50:40,875 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,876 ERROR df[col] = result[col]
2025-07-09 08:50:40,877 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,877 ERROR df[col] = result[col]
2025-07-09 08:50:40,877 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,877 ERROR df[col] = result[col]
2025-07-09 08:50:40,878 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,878 ERROR df[col] = result[col]
2025-07-09 08:50:40,880 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,880 ERROR df[result.name] = result
2025-07-09 08:50:40,886 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,886 ERROR df[col] = result[col]
2025-07-09 08:50:40,887 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,887 ERROR df[col] = result[col]
2025-07-09 08:50:40,893 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,893 ERROR df[result.name] = result
2025-07-09 08:50:40,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,903 ERROR df[col] = result[col]
2025-07-09 08:50:40,905 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,909 ERROR df[col] = result[col]
2025-07-09 08:50:40,932 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,932 ERROR df[col] = result[col]
2025-07-09 08:50:40,938 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:40,941 ERROR df[result.name] = result
2025-07-09 08:50:41,012 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,014 ERROR df[result.name] = result
2025-07-09 08:50:41,015 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,016 ERROR df[result.name] = result
2025-07-09 08:50:41,020 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,021 ERROR df[result.name] = result
2025-07-09 08:50:41,028 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4.78530687022901' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 08:50:41,029 ERROR result = attr(**kwargs)
2025-07-09 08:50:41,703 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,703 ERROR df[result.name] = result
2025-07-09 08:50:41,713 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,713 ERROR df[col] = result[col]
2025-07-09 08:50:41,713 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,713 ERROR df[col] = result[col]
2025-07-09 08:50:41,720 ERROR c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\numpy\core\fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.
2025-07-09 08:50:41,720 ERROR return bound(*args, **kwds)
2025-07-09 08:50:41,732 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,732 ERROR df[col] = result[col]
2025-07-09 08:50:41,733 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,733 ERROR df[col] = result[col]
2025-07-09 08:50:41,734 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,734 ERROR df[col] = result[col]
2025-07-09 08:50:41,734 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,735 ERROR df[col] = result[col]
2025-07-09 08:50:41,735 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,735 ERROR df[col] = result[col]
2025-07-09 08:50:41,737 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,737 ERROR df[col] = result[col]
2025-07-09 08:50:41,759 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,759 ERROR df[result.name] = result
2025-07-09 08:50:41,762 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,762 ERROR df[result.name] = result
2025-07-09 08:50:41,764 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,764 ERROR df[result.name] = result
2025-07-09 08:50:41,767 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:41,767 ERROR df[result.name] = result
2025-07-09 08:50:42,087 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:42,087 ERROR df[result.name] = result
2025-07-09 08:50:42,091 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:42,091 ERROR df[result.name] = result
2025-07-09 08:50:42,095 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 08:50:42,095 ERROR df[result.name] = result
2025-07-09 08:50:42,097 INFO Successfully added 205 new features. Names saved to all_features_computed.log
2025-07-09 08:50:42,176 INFO Feature generation complete. Data shape for backtest: (0, 8)
2025-07-09 08:50:42,681 INFO Wednesday July 9, 2025, NYSE: 4:50:17, Local: 8:50:17 שעון קיץ ירושלים, Day 190/365 (52.00%)
2025-07-09 08:50:42,682 ERROR Traceback (most recent call last):
2025-07-09 08:50:42,682 ERROR File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 176, in <module>
2025-07-09 08:50:42,683 ERROR run_backtest(str(data_file), str(config_file))  File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 153, in run_backtest
2025-07-09 08:50:42,684 ERROR equity_curve = pd.Series(equity, index=aligned_df.index[len(aligned_df)-len(equity):])^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\series.py", line 575, in __init__
2025-07-09 08:50:42,686 ERROR com.require_length_match(data, index)  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\common.py", line 573, in require_length_match
2025-07-09 08:50:42,687 ERROR raise ValueError(ValueError: Length of values (1) does not match length of index (0)
