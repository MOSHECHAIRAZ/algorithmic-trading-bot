2025-07-09 09:12:37,143 INFO --- Starting Backtest ---
2025-07-09 09:12:37,201 INFO Loaded 8 features from config.
2025-07-09 09:12:37,201 INFO Generating features for backtest (mirroring trainer)...
2025-07-09 09:12:37,203 INFO Loaded 26 known broken indicators to skip.
2025-07-09 09:12:38,511 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:12:38,511 ERROR result = attr(**kwargs)
2025-07-09 09:12:38,511 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
2025-07-09 09:12:38,511 ERROR result = attr(**kwargs)
2025-07-09 09:12:38,537 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:12:38,537 ERROR result = attr(**kwargs)
2025-07-09 09:12:40,566 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:12:40,567 ERROR result = attr(**kwargs)
2025-07-09 09:12:41,109 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:12:41,110 ERROR result = attr(**kwargs)
2025-07-09 09:12:42,743 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[7.07271608e+09 6.80830266e+09 7.68989479e+09 ... 3.47741073e+10
2025-07-09 09:12:42,743 ERROR 2.52100606e+10 1.93982310e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 09:12:42,743 ERROR result = attr(**kwargs)
2025-07-09 09:12:42,745 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[6.38663765e+09 4.62558366e+09 1.03476955e+10 ... 2.86157006e+10
2025-07-09 09:12:42,746 ERROR 3.01739483e+10 3.19953359e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 09:12:42,746 ERROR result = attr(**kwargs)
2025-07-09 09:12:42,750 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,751 ERROR df[result.name] = result
2025-07-09 09:12:42,752 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,753 ERROR df[result.name] = result
2025-07-09 09:12:42,754 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,755 ERROR df[result.name] = result
2025-07-09 09:12:42,756 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,756 ERROR df[result.name] = result
2025-07-09 09:12:42,762 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,762 ERROR df[result.name] = result
2025-07-09 09:12:42,769 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,769 ERROR df[result.name] = result
2025-07-09 09:12:42,776 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,776 ERROR df[result.name] = result
2025-07-09 09:12:42,784 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,784 ERROR df[result.name] = result
2025-07-09 09:12:42,790 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,790 ERROR df[col] = result[col]
2025-07-09 09:12:42,791 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,791 ERROR df[col] = result[col]
2025-07-09 09:12:42,792 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:42,792 ERROR df[col] = result[col]
2025-07-09 09:12:43,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:43,901 ERROR df[col] = result[col]
2025-07-09 09:12:43,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:43,901 ERROR df[col] = result[col]
2025-07-09 09:12:43,902 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:43,902 ERROR df[col] = result[col]
2025-07-09 09:12:43,903 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:43,903 ERROR df[col] = result[col]
2025-07-09 09:12:43,907 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:43,907 ERROR df[result.name] = result
2025-07-09 09:12:46,325 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,325 ERROR df[result.name] = result
2025-07-09 09:12:46,329 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,329 ERROR df[col] = result[col]
2025-07-09 09:12:46,330 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,330 ERROR df[col] = result[col]
2025-07-09 09:12:46,334 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,335 ERROR df[col] = result[col]
2025-07-09 09:12:46,336 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,336 ERROR df[result.name] = result
2025-07-09 09:12:46,340 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,340 ERROR df[result.name] = result
2025-07-09 09:12:46,341 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,341 ERROR df[result.name] = result
2025-07-09 09:12:46,356 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:46,356 ERROR df[result.name] = result
2025-07-09 09:12:48,434 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,434 ERROR df[col] = result[col]
2025-07-09 09:12:48,435 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,435 ERROR df[col] = result[col]
2025-07-09 09:12:48,436 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,436 ERROR df[col] = result[col]
2025-07-09 09:12:48,437 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,437 ERROR df[col] = result[col]
2025-07-09 09:12:48,444 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,444 ERROR df[result.name] = result
2025-07-09 09:12:48,447 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,447 ERROR df[result.name] = result
2025-07-09 09:12:48,450 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,450 ERROR df[result.name] = result
2025-07-09 09:12:48,455 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,455 ERROR df[result.name] = result
2025-07-09 09:12:48,554 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,555 ERROR df[result.name] = result
2025-07-09 09:12:48,560 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,561 ERROR df[result.name] = result
2025-07-09 09:12:48,853 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,853 ERROR df[result.name] = result
2025-07-09 09:12:48,857 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,857 ERROR df[result.name] = result
2025-07-09 09:12:48,860 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,860 ERROR df[result.name] = result
2025-07-09 09:12:48,863 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,864 ERROR df[result.name] = result
2025-07-09 09:12:48,874 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,874 ERROR df[col] = result[col]
2025-07-09 09:12:48,875 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,876 ERROR df[col] = result[col]
2025-07-09 09:12:48,877 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,877 ERROR df[col] = result[col]
2025-07-09 09:12:48,898 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,898 ERROR df[col] = result[col]
2025-07-09 09:12:48,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,901 ERROR df[col] = result[col]
2025-07-09 09:12:48,903 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,903 ERROR df[col] = result[col]
2025-07-09 09:12:48,905 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,905 ERROR df[col] = result[col]
2025-07-09 09:12:48,940 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,940 ERROR df[col] = result[col]
2025-07-09 09:12:48,942 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,942 ERROR df[col] = result[col]
2025-07-09 09:12:48,943 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,943 ERROR df[col] = result[col]
2025-07-09 09:12:48,944 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,944 ERROR df[col] = result[col]
2025-07-09 09:12:48,944 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,944 ERROR df[col] = result[col]
2025-07-09 09:12:48,945 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:48,945 ERROR df[col] = result[col]
2025-07-09 09:12:50,188 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:50,189 ERROR df[result.name] = result
2025-07-09 09:12:50,194 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:12:50,194 ERROR result = attr(**kwargs)
2025-07-09 09:12:51,401 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,401 ERROR df[col] = result[col]
2025-07-09 09:12:51,402 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,402 ERROR df[col] = result[col]
2025-07-09 09:12:51,402 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,403 ERROR df[col] = result[col]
2025-07-09 09:12:51,405 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,405 ERROR df[result.name] = result
2025-07-09 09:12:51,412 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,412 ERROR df[col] = result[col]
2025-07-09 09:12:51,414 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,414 ERROR df[col] = result[col]
2025-07-09 09:12:51,423 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,424 ERROR df[col] = result[col]
2025-07-09 09:12:51,424 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:12:51,425 ERROR df[col] = result[col]
2025-07-09 09:12:51,434 WARNING Found 61 failing indicators. Report saved to feature_fail_report.json
2025-07-09 09:12:51,434 INFO Successfully added 158 new features. Names saved to all_features_computed.log
2025-07-09 09:12:51,490 INFO Feature generation complete. Data shape for backtest: (0, 8)
2025-07-09 09:12:51,945 INFO Wednesday July 9, 2025, NYSE: 5:12:39, Local: 9:12:39 שעון קיץ ירושלים, Day 190/365 (52.00%)
2025-07-09 09:12:51,946 ERROR Traceback (most recent call last):
2025-07-09 09:12:51,946 ERROR File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 176, in <module>
2025-07-09 09:12:51,947 ERROR run_backtest(str(data_file), str(config_file))  File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 153, in run_backtest
2025-07-09 09:12:51,948 ERROR equity_curve = pd.Series(equity, index=aligned_df.index[len(aligned_df)-len(equity):])^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\series.py", line 575, in __init__
2025-07-09 09:12:51,951 ERROR com.require_length_match(data, index)  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\common.py", line 573, in require_length_match
2025-07-09 09:12:51,953 ERROR raise ValueError(ValueError: Length of values (1) does not match length of index (0)
