2025-07-09 09:24:59,801 INFO --- Starting Backtest ---
2025-07-09 09:24:59,826 INFO Loaded 8 features from config.
2025-07-09 09:24:59,826 INFO Generating features for backtest (mirroring trainer)...
2025-07-09 09:24:59,828 INFO Loaded 61 known broken indicators to skip.
2025-07-09 09:25:01,180 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:25:01,180 ERROR result = attr(**kwargs)
2025-07-09 09:25:01,181 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
2025-07-09 09:25:01,181 ERROR result = attr(**kwargs)
2025-07-09 09:25:01,204 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:25:01,204 ERROR result = attr(**kwargs)
2025-07-09 09:25:03,203 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:25:03,203 ERROR result = attr(**kwargs)
2025-07-09 09:25:03,630 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:25:03,631 ERROR result = attr(**kwargs)
2025-07-09 09:25:04,412 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[7.07271608e+09 6.80830266e+09 7.68989479e+09 ... 3.47741073e+10
2025-07-09 09:25:04,413 ERROR 2.52100606e+10 1.93982310e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 09:25:04,413 ERROR result = attr(**kwargs)
2025-07-09 09:25:04,415 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[6.38663765e+09 4.62558366e+09 1.03476955e+10 ... 2.86157006e+10
2025-07-09 09:25:04,415 ERROR 3.01739483e+10 3.19953359e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 09:25:04,415 ERROR result = attr(**kwargs)
2025-07-09 09:25:04,418 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,418 ERROR df[result.name] = result
2025-07-09 09:25:04,420 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,421 ERROR df[result.name] = result
2025-07-09 09:25:04,422 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,423 ERROR df[result.name] = result
2025-07-09 09:25:04,424 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,424 ERROR df[result.name] = result
2025-07-09 09:25:04,428 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,428 ERROR df[result.name] = result
2025-07-09 09:25:04,432 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,433 ERROR df[result.name] = result
2025-07-09 09:25:04,437 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,437 ERROR df[result.name] = result
2025-07-09 09:25:04,443 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,444 ERROR df[result.name] = result
2025-07-09 09:25:04,447 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,447 ERROR df[col] = result[col]
2025-07-09 09:25:04,448 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,448 ERROR df[col] = result[col]
2025-07-09 09:25:04,448 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:04,449 ERROR df[col] = result[col]
2025-07-09 09:25:06,060 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:06,060 ERROR df[col] = result[col]
2025-07-09 09:25:06,061 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:06,061 ERROR df[col] = result[col]
2025-07-09 09:25:06,062 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:06,062 ERROR df[col] = result[col]
2025-07-09 09:25:06,062 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:06,062 ERROR df[col] = result[col]
2025-07-09 09:25:06,066 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:06,066 ERROR df[result.name] = result
2025-07-09 09:25:08,994 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:08,994 ERROR df[result.name] = result
2025-07-09 09:25:08,997 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:08,997 ERROR df[col] = result[col]
2025-07-09 09:25:08,998 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:08,998 ERROR df[col] = result[col]
2025-07-09 09:25:08,999 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:08,999 ERROR df[col] = result[col]
2025-07-09 09:25:09,000 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:09,000 ERROR df[result.name] = result
2025-07-09 09:25:09,004 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:09,004 ERROR df[result.name] = result
2025-07-09 09:25:09,005 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:09,005 ERROR df[result.name] = result
2025-07-09 09:25:09,019 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:09,019 ERROR df[result.name] = result
2025-07-09 09:25:10,979 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,979 ERROR df[col] = result[col]
2025-07-09 09:25:10,980 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,980 ERROR df[col] = result[col]
2025-07-09 09:25:10,981 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,981 ERROR df[col] = result[col]
2025-07-09 09:25:10,981 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,981 ERROR df[col] = result[col]
2025-07-09 09:25:10,985 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,985 ERROR df[result.name] = result
2025-07-09 09:25:10,987 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,987 ERROR df[result.name] = result
2025-07-09 09:25:10,988 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,988 ERROR df[result.name] = result
2025-07-09 09:25:10,992 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:10,993 ERROR df[result.name] = result
2025-07-09 09:25:11,065 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,065 ERROR df[result.name] = result
2025-07-09 09:25:11,071 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,071 ERROR df[result.name] = result
2025-07-09 09:25:11,323 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,324 ERROR df[result.name] = result
2025-07-09 09:25:11,326 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,326 ERROR df[result.name] = result
2025-07-09 09:25:11,328 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,329 ERROR df[result.name] = result
2025-07-09 09:25:11,330 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,330 ERROR df[result.name] = result
2025-07-09 09:25:11,336 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,336 ERROR df[col] = result[col]
2025-07-09 09:25:11,337 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,337 ERROR df[col] = result[col]
2025-07-09 09:25:11,337 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,338 ERROR df[col] = result[col]
2025-07-09 09:25:11,352 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,353 ERROR df[col] = result[col]
2025-07-09 09:25:11,353 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,353 ERROR df[col] = result[col]
2025-07-09 09:25:11,354 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,354 ERROR df[col] = result[col]
2025-07-09 09:25:11,354 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,354 ERROR df[col] = result[col]
2025-07-09 09:25:11,375 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,375 ERROR df[col] = result[col]
2025-07-09 09:25:11,377 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,377 ERROR df[col] = result[col]
2025-07-09 09:25:11,378 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,378 ERROR df[col] = result[col]
2025-07-09 09:25:11,379 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,379 ERROR df[col] = result[col]
2025-07-09 09:25:11,380 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,380 ERROR df[col] = result[col]
2025-07-09 09:25:11,381 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,381 ERROR df[col] = result[col]
2025-07-09 09:25:11,816 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:11,816 ERROR df[result.name] = result
2025-07-09 09:25:11,822 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 09:25:11,822 ERROR result = attr(**kwargs)
2025-07-09 09:25:12,927 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,927 ERROR df[col] = result[col]
2025-07-09 09:25:12,928 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,928 ERROR df[col] = result[col]
2025-07-09 09:25:12,928 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,929 ERROR df[col] = result[col]
2025-07-09 09:25:12,930 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,930 ERROR df[result.name] = result
2025-07-09 09:25:12,937 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,937 ERROR df[col] = result[col]
2025-07-09 09:25:12,938 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,938 ERROR df[col] = result[col]
2025-07-09 09:25:12,946 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,947 ERROR df[col] = result[col]
2025-07-09 09:25:12,948 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:12,948 ERROR df[col] = result[col]
2025-07-09 09:25:13,547 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,547 ERROR df[col] = result[col]
2025-07-09 09:25:13,548 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,548 ERROR df[col] = result[col]
2025-07-09 09:25:13,549 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,549 ERROR df[col] = result[col]
2025-07-09 09:25:13,549 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,550 ERROR df[col] = result[col]
2025-07-09 09:25:13,563 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,563 ERROR df[result.name] = result
2025-07-09 09:25:13,568 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:13,568 ERROR df[result.name] = result
2025-07-09 09:25:21,534 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,534 ERROR df[col] = result[col]
2025-07-09 09:25:21,535 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,535 ERROR df[col] = result[col]
2025-07-09 09:25:21,538 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,538 ERROR df[result.name] = result
2025-07-09 09:25:21,543 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,543 ERROR df[col] = result[col]
2025-07-09 09:25:21,544 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,544 ERROR df[col] = result[col]
2025-07-09 09:25:21,545 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,545 ERROR df[col] = result[col]
2025-07-09 09:25:21,546 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,547 ERROR df[col] = result[col]
2025-07-09 09:25:21,565 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,565 ERROR df[col] = result[col]
2025-07-09 09:25:21,566 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,566 ERROR df[col] = result[col]
2025-07-09 09:25:21,566 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,567 ERROR df[col] = result[col]
2025-07-09 09:25:21,567 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,567 ERROR df[col] = result[col]
2025-07-09 09:25:21,568 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,568 ERROR df[col] = result[col]
2025-07-09 09:25:21,568 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,568 ERROR df[col] = result[col]
2025-07-09 09:25:21,569 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,569 ERROR df[col] = result[col]
2025-07-09 09:25:21,571 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,571 ERROR df[result.name] = result
2025-07-09 09:25:21,577 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,577 ERROR df[col] = result[col]
2025-07-09 09:25:21,579 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,579 ERROR df[col] = result[col]
2025-07-09 09:25:21,583 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,583 ERROR df[result.name] = result
2025-07-09 09:25:21,588 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,588 ERROR df[col] = result[col]
2025-07-09 09:25:21,589 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,589 ERROR df[col] = result[col]
2025-07-09 09:25:21,595 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,595 ERROR df[col] = result[col]
2025-07-09 09:25:21,597 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,597 ERROR df[result.name] = result
2025-07-09 09:25:21,605 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,605 ERROR df[result.name] = result
2025-07-09 09:25:21,607 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,607 ERROR df[result.name] = result
2025-07-09 09:25:21,611 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:21,611 ERROR df[result.name] = result
2025-07-09 09:25:21,614 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:272: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4.78530687022901' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 09:25:21,615 ERROR result = attr(**kwargs)
2025-07-09 09:25:22,106 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,106 ERROR df[result.name] = result
2025-07-09 09:25:22,115 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,115 ERROR df[col] = result[col]
2025-07-09 09:25:22,116 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,117 ERROR df[col] = result[col]
2025-07-09 09:25:22,124 ERROR c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\numpy\core\fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.
2025-07-09 09:25:22,124 ERROR return bound(*args, **kwds)
2025-07-09 09:25:22,133 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,134 ERROR df[col] = result[col]
2025-07-09 09:25:22,134 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,135 ERROR df[col] = result[col]
2025-07-09 09:25:22,135 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,135 ERROR df[col] = result[col]
2025-07-09 09:25:22,136 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,136 ERROR df[col] = result[col]
2025-07-09 09:25:22,137 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,137 ERROR df[col] = result[col]
2025-07-09 09:25:22,138 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:278: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,138 ERROR df[col] = result[col]
2025-07-09 09:25:22,146 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,146 ERROR df[result.name] = result
2025-07-09 09:25:22,148 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,149 ERROR df[result.name] = result
2025-07-09 09:25:22,150 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,150 ERROR df[result.name] = result
2025-07-09 09:25:22,152 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,153 ERROR df[result.name] = result
2025-07-09 09:25:22,436 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,436 ERROR df[result.name] = result
2025-07-09 09:25:22,439 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,439 ERROR df[result.name] = result
2025-07-09 09:25:22,441 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:283: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 09:25:22,442 ERROR df[result.name] = result
2025-07-09 09:25:22,447 INFO Successfully added 205 new features. Names saved to all_features_computed.log
2025-07-09 09:25:22,529 INFO Feature generation complete. Data shape for backtest: (0, 8)
2025-07-09 09:25:23,019 INFO Wednesday July 9, 2025, NYSE: 5:25:01, Local: 9:25:01 שעון קיץ ירושלים, Day 190/365 (52.00%)
2025-07-09 09:25:23,020 ERROR Traceback (most recent call last):
2025-07-09 09:25:23,020 ERROR File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 176, in <module>
2025-07-09 09:25:23,021 ERROR run_backtest(str(data_file), str(config_file))  File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 153, in run_backtest
2025-07-09 09:25:23,022 ERROR equity_curve = pd.Series(equity, index=aligned_df.index[len(aligned_df)-len(equity):])^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\series.py", line 575, in __init__
2025-07-09 09:25:23,023 ERROR com.require_length_match(data, index)  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\common.py", line 573, in require_length_match
2025-07-09 09:25:23,024 ERROR raise ValueError(ValueError: Length of values (1) does not match length of index (0)
