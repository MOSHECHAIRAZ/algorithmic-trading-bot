2025-07-09 07:33:11,588 INFO --- Starting Backtest ---
2025-07-09 07:33:11,629 INFO Loaded 8 features from config.
2025-07-09 07:33:11,629 INFO Generating features for backtest (mirroring trainer)...
2025-07-09 07:33:13,086 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 07:33:13,086 ERROR result = attr(**kwargs)
2025-07-09 07:33:13,087 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
2025-07-09 07:33:13,087 ERROR result = attr(**kwargs)
2025-07-09 07:33:13,109 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 07:33:13,109 ERROR result = attr(**kwargs)
2025-07-09 07:33:15,147 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 07:33:15,147 ERROR result = attr(**kwargs)
2025-07-09 07:33:15,623 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 07:33:15,623 ERROR result = attr(**kwargs)
2025-07-09 07:33:17,487 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[7.07271608e+09 6.80830266e+09 7.68989479e+09 ... 3.47741073e+10
2025-07-09 07:33:17,488 ERROR 2.52100606e+10 1.93982310e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 07:33:17,488 ERROR result = attr(**kwargs)
2025-07-09 07:33:17,490 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[6.38663765e+09 4.62558366e+09 1.03476955e+10 ... 2.86157006e+10
2025-07-09 07:33:17,491 ERROR 3.01739483e+10 3.19953359e+10]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 07:33:17,491 ERROR result = attr(**kwargs)
2025-07-09 07:33:17,493 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,493 ERROR df[result.name] = result
2025-07-09 07:33:17,495 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,496 ERROR df[result.name] = result
2025-07-09 07:33:17,498 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,499 ERROR df[result.name] = result
2025-07-09 07:33:17,500 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,500 ERROR df[result.name] = result
2025-07-09 07:33:17,507 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,507 ERROR df[result.name] = result
2025-07-09 07:33:17,513 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,513 ERROR df[result.name] = result
2025-07-09 07:33:17,522 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,522 ERROR df[result.name] = result
2025-07-09 07:33:17,529 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,529 ERROR df[result.name] = result
2025-07-09 07:33:17,534 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,534 ERROR df[col] = result[col]
2025-07-09 07:33:17,535 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,535 ERROR df[col] = result[col]
2025-07-09 07:33:17,536 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:17,537 ERROR df[col] = result[col]
2025-07-09 07:33:18,544 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:18,544 ERROR df[col] = result[col]
2025-07-09 07:33:18,544 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:18,545 ERROR df[col] = result[col]
2025-07-09 07:33:18,545 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:18,545 ERROR df[col] = result[col]
2025-07-09 07:33:18,546 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:18,546 ERROR df[col] = result[col]
2025-07-09 07:33:18,549 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:18,549 ERROR df[result.name] = result
2025-07-09 07:33:22,153 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,153 ERROR df[result.name] = result
2025-07-09 07:33:22,161 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,162 ERROR df[col] = result[col]
2025-07-09 07:33:22,163 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,163 ERROR df[col] = result[col]
2025-07-09 07:33:22,164 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,165 ERROR df[col] = result[col]
2025-07-09 07:33:22,168 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,169 ERROR df[result.name] = result
2025-07-09 07:33:22,177 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,177 ERROR df[result.name] = result
2025-07-09 07:33:22,182 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,182 ERROR df[result.name] = result
2025-07-09 07:33:22,207 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:22,207 ERROR df[result.name] = result
2025-07-09 07:33:24,496 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,496 ERROR df[col] = result[col]
2025-07-09 07:33:24,497 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,497 ERROR df[col] = result[col]
2025-07-09 07:33:24,498 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,498 ERROR df[col] = result[col]
2025-07-09 07:33:24,498 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,498 ERROR df[col] = result[col]
2025-07-09 07:33:24,503 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,504 ERROR df[result.name] = result
2025-07-09 07:33:24,505 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,506 ERROR df[result.name] = result
2025-07-09 07:33:24,508 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,508 ERROR df[result.name] = result
2025-07-09 07:33:24,513 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,513 ERROR df[result.name] = result
2025-07-09 07:33:24,599 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,599 ERROR df[result.name] = result
2025-07-09 07:33:24,608 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,608 ERROR df[result.name] = result
2025-07-09 07:33:24,930 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,930 ERROR df[result.name] = result
2025-07-09 07:33:24,932 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,933 ERROR df[result.name] = result
2025-07-09 07:33:24,934 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,934 ERROR df[result.name] = result
2025-07-09 07:33:24,936 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,936 ERROR df[result.name] = result
2025-07-09 07:33:24,943 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,943 ERROR df[col] = result[col]
2025-07-09 07:33:24,944 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,944 ERROR df[col] = result[col]
2025-07-09 07:33:24,944 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,944 ERROR df[col] = result[col]
2025-07-09 07:33:24,963 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,964 ERROR df[col] = result[col]
2025-07-09 07:33:24,965 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,965 ERROR df[col] = result[col]
2025-07-09 07:33:24,966 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,966 ERROR df[col] = result[col]
2025-07-09 07:33:24,967 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:24,967 ERROR df[col] = result[col]
2025-07-09 07:33:25,002 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,002 ERROR df[col] = result[col]
2025-07-09 07:33:25,003 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,003 ERROR df[col] = result[col]
2025-07-09 07:33:25,004 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,004 ERROR df[col] = result[col]
2025-07-09 07:33:25,005 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,005 ERROR df[col] = result[col]
2025-07-09 07:33:25,005 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,005 ERROR df[col] = result[col]
2025-07-09 07:33:25,006 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,006 ERROR df[col] = result[col]
2025-07-09 07:33:25,466 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:25,466 ERROR df[result.name] = result
2025-07-09 07:33:25,472 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
2025-07-09 07:33:25,472 ERROR result = attr(**kwargs)
2025-07-09 07:33:26,621 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,621 ERROR df[col] = result[col]
2025-07-09 07:33:26,622 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,622 ERROR df[col] = result[col]
2025-07-09 07:33:26,622 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,622 ERROR df[col] = result[col]
2025-07-09 07:33:26,624 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,624 ERROR df[result.name] = result
2025-07-09 07:33:26,633 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,633 ERROR df[col] = result[col]
2025-07-09 07:33:26,635 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,635 ERROR df[col] = result[col]
2025-07-09 07:33:26,643 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,644 ERROR df[col] = result[col]
2025-07-09 07:33:26,644 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:26,645 ERROR df[col] = result[col]
2025-07-09 07:33:27,282 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,282 ERROR df[col] = result[col]
2025-07-09 07:33:27,283 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,283 ERROR df[col] = result[col]
2025-07-09 07:33:27,284 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,284 ERROR df[col] = result[col]
2025-07-09 07:33:27,285 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,285 ERROR df[col] = result[col]
2025-07-09 07:33:27,305 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,305 ERROR df[result.name] = result
2025-07-09 07:33:27,312 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:27,313 ERROR df[result.name] = result
2025-07-09 07:33:36,861 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,862 ERROR df[col] = result[col]
2025-07-09 07:33:36,863 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,863 ERROR df[col] = result[col]
2025-07-09 07:33:36,868 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,869 ERROR df[result.name] = result
2025-07-09 07:33:36,874 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,874 ERROR df[col] = result[col]
2025-07-09 07:33:36,876 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,876 ERROR df[col] = result[col]
2025-07-09 07:33:36,877 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,877 ERROR df[col] = result[col]
2025-07-09 07:33:36,877 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,877 ERROR df[col] = result[col]
2025-07-09 07:33:36,897 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,898 ERROR df[col] = result[col]
2025-07-09 07:33:36,898 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,899 ERROR df[col] = result[col]
2025-07-09 07:33:36,899 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,900 ERROR df[col] = result[col]
2025-07-09 07:33:36,901 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,901 ERROR df[col] = result[col]
2025-07-09 07:33:36,902 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,902 ERROR df[col] = result[col]
2025-07-09 07:33:36,903 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,903 ERROR df[col] = result[col]
2025-07-09 07:33:36,903 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,904 ERROR df[col] = result[col]
2025-07-09 07:33:36,906 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,906 ERROR df[result.name] = result
2025-07-09 07:33:36,912 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,913 ERROR df[col] = result[col]
2025-07-09 07:33:36,914 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,914 ERROR df[col] = result[col]
2025-07-09 07:33:36,919 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,919 ERROR df[result.name] = result
2025-07-09 07:33:36,926 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,927 ERROR df[col] = result[col]
2025-07-09 07:33:36,928 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,928 ERROR df[col] = result[col]
2025-07-09 07:33:36,934 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,934 ERROR df[col] = result[col]
2025-07-09 07:33:36,937 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,938 ERROR df[result.name] = result
2025-07-09 07:33:36,949 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,950 ERROR df[result.name] = result
2025-07-09 07:33:36,952 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,952 ERROR df[result.name] = result
2025-07-09 07:33:36,957 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:36,957 ERROR df[result.name] = result
2025-07-09 07:33:36,962 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:333: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4.78530687022901' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
2025-07-09 07:33:36,963 ERROR result = attr(**kwargs)
2025-07-09 07:33:37,513 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,514 ERROR df[result.name] = result
2025-07-09 07:33:37,521 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,522 ERROR df[col] = result[col]
2025-07-09 07:33:37,522 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,522 ERROR df[col] = result[col]
2025-07-09 07:33:37,632 ERROR c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\numpy\core\fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.
2025-07-09 07:33:37,632 ERROR return bound(*args, **kwds)
2025-07-09 07:33:37,645 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,645 ERROR df[col] = result[col]
2025-07-09 07:33:37,647 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,647 ERROR df[col] = result[col]
2025-07-09 07:33:37,648 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,648 ERROR df[col] = result[col]
2025-07-09 07:33:37,649 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,649 ERROR df[col] = result[col]
2025-07-09 07:33:37,651 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,651 ERROR df[col] = result[col]
2025-07-09 07:33:37,653 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:339: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,653 ERROR df[col] = result[col]
2025-07-09 07:33:37,671 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,671 ERROR df[result.name] = result
2025-07-09 07:33:37,674 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,675 ERROR df[result.name] = result
2025-07-09 07:33:37,676 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,676 ERROR df[result.name] = result
2025-07-09 07:33:37,679 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,679 ERROR df[result.name] = result
2025-07-09 07:33:37,993 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,993 ERROR df[result.name] = result
2025-07-09 07:33:37,997 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:37,998 ERROR df[result.name] = result
2025-07-09 07:33:38,001 ERROR C:\Users\משה\פרויקט קופילוט למידת מכונה\src\feature_calculator.py:344: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
2025-07-09 07:33:38,001 ERROR df[result.name] = result
2025-07-09 07:33:38,004 WARNING Found 61 failing indicators. Report saved to feature_fail_report.json
2025-07-09 07:33:38,004 INFO Successfully added 205 new features. Names saved to all_features_computed.log
2025-07-09 07:33:38,112 INFO Feature generation complete. Data shape for backtest: (0, 8)
2025-07-09 07:33:38,564 INFO Wednesday July 9, 2025, NYSE: 3:33:13, Local: 7:33:13 שעון קיץ ירושלים, Day 190/365 (52.00%)
2025-07-09 07:33:38,565 ERROR Traceback (most recent call last):
2025-07-09 07:33:38,565 ERROR File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 176, in <module>
2025-07-09 07:33:38,597 ERROR run_backtest(str(data_file), str(config_file))  File "C:\Users\משה\פרויקט קופילוט למידת מכונה\backtester.py", line 153, in run_backtest
2025-07-09 07:33:38,605 ERROR equity_curve = pd.Series(equity, index=aligned_df.index[len(aligned_df)-len(equity):])^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\series.py", line 575, in __init__
2025-07-09 07:33:38,682 ERROR com.require_length_match(data, index)  File "c:\Users\משה\פרויקט קופילוט למידת מכונה\.venv\Lib\site-packages\pandas\core\common.py", line 573, in require_length_match
2025-07-09 07:33:38,713 ERROR raise ValueError(ValueError: Length of values (1) does not match length of index (0)
